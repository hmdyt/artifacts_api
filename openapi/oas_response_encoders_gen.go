// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeActionAcceptNewTaskMyNameActionTaskNewPostResponse(response ActionAcceptNewTaskMyNameActionTaskNewPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode489:
		w.WriteHeader(489)
		span.SetStatus(codes.Error, http.StatusText(489))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionCompleteTaskMyNameActionTaskCompletePostResponse(response ActionCompleteTaskMyNameActionTaskCompletePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRewardResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode487:
		w.WriteHeader(487)
		span.SetStatus(codes.Error, http.StatusText(487))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode488:
		w.WriteHeader(488)
		span.SetStatus(codes.Error, http.StatusText(488))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionCraftingMyNameActionCraftingPostResponse(response ActionCraftingMyNameActionCraftingPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SkillResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionCraftingMyNameActionCraftingPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDeleteItemMyNameActionDeletePostResponse(response ActionDeleteItemMyNameActionDeletePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(response ActionDepositBankGoldMyNameActionBankDepositGoldPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GoldResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDepositBankMyNameActionBankDepositPostResponse(response ActionDepositBankMyNameActionBankDepositPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActionItemBankResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionEquipItemMyNameActionEquipPostResponse(response ActionEquipItemMyNameActionEquipPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EquipmentResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionEquipItemMyNameActionEquipPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode485:
		w.WriteHeader(485)
		span.SetStatus(codes.Error, http.StatusText(485))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode491:
		w.WriteHeader(491)
		span.SetStatus(codes.Error, http.StatusText(491))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode496:
		w.WriteHeader(496)
		span.SetStatus(codes.Error, http.StatusText(496))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionFightMyNameActionFightPostResponse(response ActionFightMyNameActionFightPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterFightResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionFightMyNameActionFightPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionFightMyNameActionFightPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionFightMyNameActionFightPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionFightMyNameActionFightPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionFightMyNameActionFightPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGatheringMyNameActionGatheringPostResponse(response ActionGatheringMyNameActionGatheringPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SkillResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGeBuyItemMyNameActionGeBuyPostResponse(response ActionGeBuyItemMyNameActionGeBuyPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GETransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode480:
		w.WriteHeader(480)
		span.SetStatus(codes.Error, http.StatusText(480))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode482:
		w.WriteHeader(482)
		span.SetStatus(codes.Error, http.StatusText(482))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGeBuyItemMyNameActionGeBuyPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGeSellItemMyNameActionGeSellPostResponse(response ActionGeSellItemMyNameActionGeSellPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GETransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode482:
		w.WriteHeader(482)
		span.SetStatus(codes.Error, http.StatusText(482))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGeSellItemMyNameActionGeSellPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionMoveMyNameActionMovePostResponse(response ActionMoveMyNameActionMovePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterMovementResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionMoveMyNameActionMovePostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionMoveMyNameActionMovePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionMoveMyNameActionMovePostCode490:
		w.WriteHeader(490)
		span.SetStatus(codes.Error, http.StatusText(490))

		return nil

	case *ActionMoveMyNameActionMovePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionMoveMyNameActionMovePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionRecyclingMyNameActionRecyclingPostResponse(response ActionRecyclingMyNameActionRecyclingPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RecyclingResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode473:
		w.WriteHeader(473)
		span.SetStatus(codes.Error, http.StatusText(473))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionTaskExchangeMyNameActionTaskExchangePostResponse(response ActionTaskExchangeMyNameActionTaskExchangePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRewardResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionUnequipItemMyNameActionUnequipPostResponse(response ActionUnequipItemMyNameActionUnequipPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EquipmentResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode491:
		w.WriteHeader(491)
		span.SetStatus(codes.Error, http.StatusText(491))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(response ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GoldResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode460:
		w.WriteHeader(460)
		span.SetStatus(codes.Error, http.StatusText(460))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionWithdrawBankMyNameActionBankWithdrawPostResponse(response ActionWithdrawBankMyNameActionBankWithdrawPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActionItemBankResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeChangePasswordMyChangePasswordPostResponse(response ChangePasswordMyChangePasswordPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ChangePasswordMyChangePasswordPostCode458:
		w.WriteHeader(458)
		span.SetStatus(codes.Error, http.StatusText(458))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateAccountAccountsCreatePostResponse(response CreateAccountAccountsCreatePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateAccountAccountsCreatePostCode456:
		w.WriteHeader(456)
		span.SetStatus(codes.Error, http.StatusText(456))

		return nil

	case *CreateAccountAccountsCreatePostCode457:
		w.WriteHeader(457)
		span.SetStatus(codes.Error, http.StatusText(457))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateCharacterCharactersCreatePostResponse(response CreateCharacterCharactersCreatePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateCharacterCharactersCreatePostCode494:
		w.WriteHeader(494)
		span.SetStatus(codes.Error, http.StatusText(494))

		return nil

	case *CreateCharacterCharactersCreatePostCode495:
		w.WriteHeader(495)
		span.SetStatus(codes.Error, http.StatusText(495))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGenerateTokenTokenPostResponse(response GenerateTokenTokenPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TokenResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GenerateTokenTokenPostCode455:
		w.WriteHeader(455)
		span.SetStatus(codes.Error, http.StatusText(455))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllCharactersCharactersGetResponse(response GetAllCharactersCharactersGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageCharacterSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllCharactersCharactersGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllCharactersLogsMyLogsGetResponse(response GetAllCharactersLogsMyLogsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageLogSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllCharactersLogsMyLogsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllEventsEventsGetResponse(response GetAllEventsEventsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageEventSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllEventsEventsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllGeItemsGeGetResponse(response GetAllGeItemsGeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageGEItemSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllGeItemsGeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllItemsItemsGetResponse(response GetAllItemsItemsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageItemSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllItemsItemsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllMapsMapsGetResponse(response GetAllMapsMapsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageMapSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllMapsMapsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllMonstersMonstersGetResponse(response GetAllMonstersMonstersGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageMonsterSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllMonstersMonstersGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllResourcesResourcesGetResponse(response GetAllResourcesResourcesGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageResourceSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllResourcesResourcesGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetBankGoldsMyBankGoldGetResponse(response *GoldBankResponseSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetBankItemsMyBankItemsGetResponse(response GetBankItemsMyBankItemsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageSimpleItemSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetBankItemsMyBankItemsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetCharacterCharactersNameGetResponse(response GetCharacterCharactersNameGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetCharacterCharactersNameGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetCharacterLogsMyNameLogsGetResponse(response GetCharacterLogsMyNameLogsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageLogSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetCharacterLogsMyNameLogsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *GetCharacterLogsMyNameLogsGetCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetGeItemGeCodeGetResponse(response GetGeItemGeCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GEItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetGeItemGeCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetItemItemsCodeGetResponse(response GetItemItemsCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetItemItemsCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMapMapsXYGetResponse(response GetMapMapsXYGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MapResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMapMapsXYGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMonsterMonstersCodeGetResponse(response GetMonsterMonstersCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MonsterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMonsterMonstersCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMyCharactersMyCharactersGetResponse(response GetMyCharactersMyCharactersGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MyCharactersListSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMyCharactersMyCharactersGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetResourcesResourcesCodeGetResponse(response GetResourcesResourcesCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResourceResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetResourcesResourcesCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetStatusGetResponse(response *StatusResponseSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}
